name: pull_request-ci
on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.husky/**'

# Github Actions 권한 부여
permissions:
  contents: read # 파일 접근 권한 -> 읽기만 가능
  pull-requests: write # PR 접근 권한 -> 리뷰 작성 가능
  checks: write # 코드 파일 접근 권한 -> 작성 가능 (코드 파일 옆에 라인으로 댓글을 남김)

# 동일한 PR에 커밋을 연달아 올릴 때, 기존에 돌던 워크플로우를 자동 취소해줌
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

# Pull Request 시 검증해야 하는 작업 목록
jobs:
  pr-quality:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v4

      # 2. Node.js 설정 (22.18.0 + yarn 캐시) 단계
      - uses: actions/setup-node@v4
        with:
          node-version: "22.18.0" # 프로젝트 Node 버전 맞춤
          cache: "yarn"

      # 3. yarn 버전 고정 및 확인 (1.22.22) 단계
      - run: corepack enable
      - run: corepack prepare yarn@1.22.22 --activate
      - run: yarn --version

      # 4. Yarn 의존성 설치 및 안정성 검증 단계
      #  -> --frozen-lockfile: package.json과 yarn.lock 의존성 설치 정보가 불일치할 경우 PR 실패
      #  -> --network-timeout: 느린 네트워크 속도로 인한 간헐적 실패 완하 (10분)
      - name: Install Dependencies
        run: yarn install --frozen-lockfile --network-timeout 600000

      # 5. 환경 변수 유효성 검증 단계
      - name: Env Check
        if: ${{ github.event_name == 'pull_request' }}
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}
          ENV_REPORT_JSON: env-report.json
        run: |
          BASE="${{ github.event.pull_request.base.ref }}"
          if [ "$BASE" = "main" ] || [[ "$BASE" == release* ]]; then
            echo "Full env check for $BASE"
            yarn env:check
          else
            echo "Public-only env check for $BASE"
            ENV_CHECK_MODE=public yarn env:check
          fi

      # 6. TypeScript Compiler 타입 체크 단계
      - name: TypeScript Typecheck
        run: yarn typecheck 2> ts-error-report.txt

      # 7. 엄격한 단위 테스트 검증
      - name: Full Regression Test
        run: yarn test:ci

      # 8. 의존성 점검 검증 단계
      - name: Dependency Audit
        run: yarn audit:ci
      
      ### 의존성 리포트 생성 (검증 단계에서 같이 하면 yarn audit:ci 실패 시 리포트 생성 안됨)
      - name: Generate dependency audit report
        run: npm audit --json > dependency-audit-report.json || true

      # 9. ESLint 규칙 검증(경고도 실패 처리)
      - name: ESLint
        run: yarn lint:strict -f json -o eslint-report.json

      # 10. Prettier 포맷팅 검증 단계
      - name: Prettier Formatting
        run: yarn prettier
      
      # 11. 리포트 & 커버리지 보고서 업로드 (PR 실패 시에도 항상 업로드)
      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json
          if-no-files-found: ignore
          retention-days: 3
      - name: Upload TypeScript errors
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ts-error-report
          path: ts-error-report.txt
          if-no-files-found: ignore
          retention-days: 3
      - name: Upload env check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: env-report
          path: env-report.json
          if-no-files-found: ignore
          retention-days: 3
      - name: Upload dependency audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-report
          path: dependency-audit-report.json
          if-no-files-found: ignore
          retention-days: 3
      - name: Upload Jest coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: |
            coverage/lcov.info
            coverage/**/*.*
          if-no-files-found: ignore
          retention-days: 3
  
  # Code Review 코멘트 자동화 작업
  code-review:
    needs: pr-quality
    if: always()
    runs-on: ubuntu-latest
    steps:
      # 1) 리포트 내려받기 (없어도 계속 진행)
      - name: Download ESLint report
        uses: actions/download-artifact@v4
        with:
          name: eslint-report
          path: reports
        continue-on-error: true

      - name: Download TypeScript errors
        uses: actions/download-artifact@v4
        with:
          name: ts-error-report
          path: reports
        continue-on-error: true

      - name: Download Env check report
        uses: actions/download-artifact@v4
        with:
          name: env-report
          path: reports
        continue-on-error: true

      - name: Download dependency audit report
        uses: actions/download-artifact@v4
        with:
          name: dependency-audit-report
          path: reports
        continue-on-error: true

      - name: Download Jest coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-lcov
          path: reports
        continue-on-error: true

      # 2) 커버리지 파일 존재 여부 체크
      - name: Check coverage file
        id: cov
        shell: bash
        run: |
          if [ -f "reports/coverage/lcov.info" ]; then
            echo "has=true" >> $GITHUB_OUTPUT
          else
            echo "has=false" >> $GITHUB_OUTPUT
          fi

      # 3) 있으면 요약 생성, 없으면 스킵
      - name: Generate coverage summary (Markdown)
        if: steps.cov.outputs.has == 'true'
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          format: markdown
          output: both
          filename: reports/coverage/lcov.info
          thresholds: '60 50'

      # 4) 없을 때 대체 메시지 파일 만들어두기
      - name: Create empty coverage summary
        if: steps.cov.outputs.has != 'true'
        run: echo "_테스트 커버리지 리포트가 없음_" > code-coverage-results.md

      # 5) PR 코멘트(항상 실행)
      - name: Build review comment
        if: always()
        shell: bash
        run: |
          echo "## 🧪 테스트 커버리지 요약 내용" > pr-comment.md
          if [ -f code-coverage-results.md ]; then
            cat code-coverage-results.md >> pr-comment.md
          else
            echo "_테스트 커버리지 리포트가 없음_" >> pr-comment.md
          fi

          echo -e "\n## 🔍 점검 사항" >> pr-comment.md
          [ -f reports/eslint-report.json ] && echo "- ESLint: \`eslint-report.json\` 첨부됨" >> pr-comment.md || echo "- ESLint: (없음)" >> pr-comment.md
          [ -f reports/ts-error-report.txt ] && echo "- TypeScript: \`ts-error-report.txt\` 첨부됨" >> pr-comment.md || echo "- TypeScript: (없음)" >> pr-comment.md
          [ -f reports/env-report.json ] && echo "- Env Check: \`env-report.json\` 첨부됨" >> pr-comment.md || echo "- Env Check: (없음)" >> pr-comment.md
          [ -f reports/dependency-audit-report.json ] && echo "- Dependency Audit: \`dependency-audit-report.json\` 첨부됨" >> pr-comment.md || echo "- Dependency Audit: (없음)" >> pr-comment.md

          echo -e "\n> 상세 리포트는 'Artifacts'에서 다운로드해 확인하세요." >> pr-comment.md

      - name: Post sticky PR comment
        if: always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "PR Quality Report"
          path: pr-comment.md