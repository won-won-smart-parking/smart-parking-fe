name: pull_request-ci
on: pull_request

# Pull Request 시 검증해야 하는 작업 목록
jobs:
  pr-quality:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v4

      # 2. Node.js 설정 (22.18.0 + yarn 캐시) 단계
      - uses: actions/setup-node@v4
        with:
          node-version: "22.18.0" # 프로젝트 Node 버전 맞춤
          cache: "yarn"

      # 3. yarn 버전 고정 및 확인 (1.22.22) 단계
      - run: corepack enable
      - run: corepack prepare yarn@1.22.22 --activate
      - run: yarn --version

      # 4. Yarn 의존성 설치 및 안정성 검증 단계
      #  -> --frozen-lockfile: package.json과 yarn.lock 의존성 설치 정보가 불일치할 경우 PR 실패
      #  -> --network-timeout: 느린 네트워크 속도로 인한 간헐적 실패 완하 (10분)
      - name: Install Dependencies
        run: yarn install --frozen-lockfile --network-timeout 600000

      # 5. 환경 변수 유효성 검증 단계
      - name: Env Check
        if: ${{ github.event_name == 'pull_request' }}
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}
        run: |
          BASE="${{ github.event.pull_request.base.ref }}"
          if [ "$BASE" = "main" ] || [[ "$BASE" == release* ]]; then
            echo "Full env check for $BASE"
            yarn env:check
          else
            echo "Public-only env check for $BASE"
            ENV_CHECK_MODE=public yarn env:check
          fi

      # 6. TypeScript Compiler 타입 체크 단계
      - name: TypeScript Typecheck
        run: yarn typecheck

      # 7. 엄격한 단위 테스트 검증
      - name: Full Regression Test
        run: yarn test:ci

      # 8. 의존성 점검 검증 단계
      - name: Dependency Audit
        run: yarn audit:ci

      # 9. ESLint 규칙 검증(경고도 실패 처리)
      - name: ESLint
        run: yarn lint:strict

      # 10. Prettier 포맷팅 검증 단계
      - name: Prettier Formatting
        run: yarn prettier
